[tool.poetry]
name = "environw"
description = "Environ Weather proxy"
version = "0.1.1"
authors = ["Mark Olliver <mark@olliver.me.uk>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "environw_proxy", from = "src" }]

[tool.poetry.dependencies]
python = "^3.11"
aws-lambda-powertools = { extras = ["tracer"], version = "^2.32.0" }
requests = "^2.31.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.1.14"
boto3 = "^1.34.31"
moto = { extras = ["s3"], version = "^5.0.0" }
pytest = "^7.4.4"
pytest-mock = "^3.12.0"
coverage = "^7.4.0"
pytest-cov = "^4.1.0"
python-semantic-release = "^9.0.3"

[tool.ruff]
extend-include = ["*.ipynb"]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
]

# Same as Black.
line-length = 100
indent-width = 4

# Assume Python 3.11
target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["D", "E4", "E7", "E9", "F", "I", "TD", "FIX", "PL", "EM", "N", "TCH"]
ignore = [
  # Relax the convention by _not_ requiring documentation for every function parameter.
  "D417",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.extend-per-file-ignores]
# Also ignore `E402` in all `__init__.py` files.
"__init__.py" = ["E402"]
"tests/*_test.py" = ["F401", "F811", "PLR0913"]

[tool.pytest.ini_options]
log_cli = true
log_level = "INFO"
testpaths = ["tests"]
addopts = "-s -v --durations=0"
cache_dir = ".cache/pytest_cache"

[tool.coverage.run]
branch = true
source = ["src"]
command_line = "-m pytest"

[tool.coverage.report]
show_missing = true

[tool.coverage.xml]
output = "coverage.xml"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
build_command = "poetry build"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease = false

[tool.semantic_release.branches."0.x.x"]
match = "OLDT-\\d+"
prerelease = true
prerelease_token = "alpha"

[tool.pyright]
pythonVersion = "3.11"
include = ["olympus_filesync"]
exclude = [
  "**/node_modules",
  "**/__pycache__",
  "olympus_filesync/experimental",
  "olympus_filesync/typestubs",
]
ignore = []
defineConstant = { DEBUG = true }
stubPath = "olympus_filesync/stubs"
reportMissingImports = true
reportMissingTypeStubs = false
pythonPlatform = "Linux"
venvPath = "."
venv = ".venv"

[tool.codespell]
skip = '*.po,*.ts,./tests,package*,Taskfile.yml'
count = ''
quiet-level = 3
